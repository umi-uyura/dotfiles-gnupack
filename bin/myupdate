#!/bin/sh

#
# My update constant
#

TAG_DOTFILES="dotfiles"
TAG_DOTEMACS="dotemacs"
TAG_EMACSCASK="emacscask"
TAG_CHOCO="choco"
TAG_SDKMAN="sdkman"
TAG_PYTHON2="python2"
TAG_NODE="node"
TAGS=($TAG_DOTFILES $TAG_DOTEMACS $TAG_EMACSCASK $TAG_CHOCO $TAG_SDKMAN $TAG_PYTHON2 $TAG_NODE)

#
# My update function
#

function usage()
{
  cat << EOF
My update routine
usage : $CMDNAME [option]
   -u : upgrade the app there is updates
        skip process, specify under tags
EOF

  for tag in "${TAGS[@]}"
  do
    echo "          ${tag}"
  done

  cat << EOF
   -h : show usage
EOF
}

function skiptag()
{
  SKIPTAGARRAY=(`echo $SKIPTAG | tr -s ',' ' '`)

  for arg in "${SKIPTAGARRAY[@]}"
  do
    if [ "${arg}" = "$1" ]; then
      return 0
    fi
  done

  return 1
}


#
# My update routine
#

while getopts :hu: OPT
do
  case $OPT in
    u) echo "-u"
       UPGRADE=0
       SKIPTAG=$OPTARG
       ;;
    h) usage
       exit 1
       ;;
    :) if [ "u" = "$OPTARG" ]; then
         UPGRADE=0
         break
       fi
       echo "ERROR $OPTARG"
       exit 1
       ;;
    \?) usage
       exit 1
       ;;
  esac
done

#
# dotfiles
#
# skiptag "${TAG_DOTFILES}"
# SKIP_DOTFILES=$?

# if [ 0 -ne $SKIP_DOTFILES ]; then
#   echo
#   echo "### Checking for dotfiles updates ..."
#   echo
#   git -C ~/dotfiles remote show origin | grep 'pushes to master'
# fi

#
# .emacs.d
#
# skiptag "${TAG_DOTEMACS}"
# SKIP_DOTEMACS=$?

# if [ 0 -ne $SKIP_DOTEMACS ]; then
#   echo
#   echo "### Checking for .emacs.d updates ..."
#   echo
#   git -C ~/.emacs.d remote show origin | grep 'pushes to master'
# fi

#
# Emacs Cask
#
skiptag "${TAG_EMACSCASK}"
SKIP_EMACSCASK=$?

if [ 0 -ne $SKIP_EMACSCASK ]; then
  if [ $UPGRADE ]; then
    echo
    echo "### Updating Emacs casks ..."
    echo
    cask update --path ~/.emacs.d/
  else
    echo
    echo "### Checking for Emacs casks updates..."
    echo
    cask outdated --path ~/.emacs.d/
  fi
fi

#
# Chocolatey
#
skiptag "${TAG_CHOCO}"
SKIP_CHOCO=$?

if [ 0 -ne $SKIP_CHOCO ]; then
  # if [ $UPGRADE ]; then
  #   echo
  #   echo "### Updating Chocolatey packages ..."
  #   echo
  #   cup all -y
  #   echo "Execute `cup all - y` at the administrator command prompt."
  #   echo
  # else
    echo
    echo "### Checking for Chocolatey updates ..."
    echo
    choco outdated
  # fi
fi


#
# SDKMAN
#
skiptag "${TAG_SDKMAN}"
SKIP_SDKMAN=$?

if [ 0 -ne $SKIP_SDKMAN ]; then
  source ~/.sdkman/bin/sdkman-init.sh

  # if [ $UPGRADE ]; then
  #   echo
  #   echo "### Updating SDKMAN packages ..."
  #   echo
  #   sdk outdated
  # else
    echo
    echo "### Checking for SDKMAN updates ..."
    echo
    sdk broadcast
    sdk outdated
  # fi
fi


#
# Python 2.x pip
#
# To use the --format option, pip 9.x or later is required
#
skiptag "${TAG_PYTHON2}"
SKIP_PYTHON2=$?

if [ 0 -ne $SKIP_PYTHON2 ]; then
  if [ $UPGRADE ]; then
    echo
    echo "### Updating Python 2.x pakcages ..."
    echo
    pip2 list --outdated --format=legacy | awk '{print $1}' | xargs pip2 install -U
  else
    echo
    echo "### Checking for Python 2.x package updates ..."
    echo
    pip2 list --outdated --format=columns
  fi
fi


#
# Node packages
#
skiptag "${TAG_NODE}"
SKIP_NODE=$?

if [ 0 -ne $SKIP_NODE ]; then
  if [ $UPGRADE ]; then
    echo
    echo "### Updating NPM ..."
    echo
    # npm install -g npm
    nodist npm match

    echo
    echo "### Updating Node packages ..."
    echo
    npm update -g
  else
    echo
    echo "### Checking for Node package updates ..."
    echo
    ncu -g
  fi
fi
